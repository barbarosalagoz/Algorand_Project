/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"EventTicketing","structs":{},"methods":[{"name":"create_application","args":[{"type":"string","name":"event_name"},{"type":"uint64","name":"ticket_price"},{"type":"uint64","name":"total_tickets"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"mint_tickets","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"buy_ticket","args":[{"type":"pay","name":"payment"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"desc":"\n    Event Ticketing Akıllı Kontratı\n    Biletleri ASA/NFT olarak basar ve satar.\n    ","networks":{},"state":{"schema":{"global":{"ints":4,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"ticket_asa_id":{"keyType":"AVMBytes","valueType":"AVMUint64","key":"YXNhX2lk","desc":"Mint edilen bilet ASA ID"},"ticket_price":{"keyType":"AVMBytes","valueType":"AVMUint64","key":"cHJpY2U=","desc":"Bilet fiyatı (µAlgo)"},"total_tickets":{"keyType":"AVMBytes","valueType":"AVMUint64","key":"dG90YWw=","desc":"Toplam bilet"},"tickets_sold":{"keyType":"AVMBytes","valueType":"AVMUint64","key":"c29sZA==","desc":"Satılan bilet"},"event_name":{"keyType":"AVMBytes","valueType":"AVMString","key":"bmFtZQ==","desc":"Etkinlik adı"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[243],"errorMessage":"Bilet satışı henüz başlamadı"},{"pc":[237],"errorMessage":"Biletler tükendi"},{"pc":[148],"errorMessage":"Biletler zaten basılmış"},{"pc":[40],"errorMessage":"OnCompletion must be NoOp"},{"pc":[142],"errorMessage":"Sadece kontrat kurucusu bilet basabilir"},{"pc":[153],"errorMessage":"check self.event_name exists"},{"pc":[146,241],"errorMessage":"check self.ticket_asa_id exists"},{"pc":[252],"errorMessage":"check self.ticket_price exists"},{"pc":[229],"errorMessage":"check self.tickets_sold exists"},{"pc":[157,233],"errorMessage":"check self.total_tickets exists"},{"pc":[87],"errorMessage":"invalid array length header"},{"pc":[95],"errorMessage":"invalid number of bytes for arc4.dynamic_array<arc4.uint8>"},{"pc":[106,115],"errorMessage":"invalid number of bytes for arc4.uint64"},{"pc":[225],"errorMessage":"transaction type is pay"},{"pc":[262],"errorMessage":"Ödeme bu kontrata yapılmalı"},{"pc":[254],"errorMessage":"Ödeme miktarı bilet fiyatıyla eşleşmiyor"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CyADAAEIJgUGYXNhX2lkBXRvdGFsBHNvbGQEbmFtZQVwcmljZTEZFEQxGEEAFoICBICyAQAEZTaAuDYaAI4CAEYAlQCABArw0U82GgCOAQABADYaAUkiWYECCEsBFRJEVwIANhoCSRUkEkQXNhoDSRUkEkQXK08DZycETwJnKUxnKiJnKCJnI0MxADIJEkQiKGVEFESxIitlRCIpZUQyCkcDsiyyK7IqsikisiQisiOyIoAGVElDS0VUsiWyJoEDshAisgGztDwoSwFnFoAEFR98dUxQsCNDMRYjCUk4ECMSRCIqZUQiKWVESwENRCIoZURJREsCOAgiJwRlRBJETwI4BzIKEkSxMQAjshKyFLIRgQSyECKyAbMjCCpMZyND","clear":"C4EBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":5,"minor":4,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the EventTicketing contract
 */
export type EventTicketingArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create_application(string,uint64,uint64)void': {
      eventName: string
      ticketPrice: bigint | number
      totalTickets: bigint | number
    }
    'mint_tickets()uint64': Record<string, never>
    'buy_ticket(pay)void': {
      payment: AppMethodCallTransactionArgument
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create_application(string,uint64,uint64)void': [eventName: string, ticketPrice: bigint | number, totalTickets: bigint | number]
    'mint_tickets()uint64': []
    'buy_ticket(pay)void': [payment: AppMethodCallTransactionArgument]
  }
}

/**
 * The return type for each method
 */
export type EventTicketingReturns = {
  'create_application(string,uint64,uint64)void': void
  'mint_tickets()uint64': bigint
  'buy_ticket(pay)void': void
}

/**
 * Defines the types of available calls and state of the EventTicketing smart contract.
 */
export type EventTicketingTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create_application(string,uint64,uint64)void' | 'create_application', {
      argsObj: EventTicketingArgs['obj']['create_application(string,uint64,uint64)void']
      argsTuple: EventTicketingArgs['tuple']['create_application(string,uint64,uint64)void']
      returns: EventTicketingReturns['create_application(string,uint64,uint64)void']
    }>
    & Record<'mint_tickets()uint64' | 'mint_tickets', {
      argsObj: EventTicketingArgs['obj']['mint_tickets()uint64']
      argsTuple: EventTicketingArgs['tuple']['mint_tickets()uint64']
      returns: EventTicketingReturns['mint_tickets()uint64']
    }>
    & Record<'buy_ticket(pay)void' | 'buy_ticket', {
      argsObj: EventTicketingArgs['obj']['buy_ticket(pay)void']
      argsTuple: EventTicketingArgs['tuple']['buy_ticket(pay)void']
      returns: EventTicketingReturns['buy_ticket(pay)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        /**
         * Mint edilen bilet ASA ID
         */
        ticketAsaId: bigint
        /**
         * Bilet fiyatı (µAlgo)
         */
        ticketPrice: bigint
        /**
         * Toplam bilet
         */
        totalTickets: bigint
        /**
         * Satılan bilet
         */
        ticketsSold: bigint
        /**
         * Etkinlik adı
         */
        eventName: string
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type EventTicketingSignatures = keyof EventTicketingTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type EventTicketingNonVoidMethodSignatures = keyof EventTicketingTypes['methods'] extends infer T ? T extends keyof EventTicketingTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the EventTicketing smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends EventTicketingSignatures> = EventTicketingTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the EventTicketing smart contract to the method's return type
 */
export type MethodReturn<TSignature extends EventTicketingSignatures> = EventTicketingTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = EventTicketingTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type EventTicketingCreateCallParams =
  | Expand<CallParams<EventTicketingArgs['obj']['create_application(string,uint64,uint64)void'] | EventTicketingArgs['tuple']['create_application(string,uint64,uint64)void']> & {method: 'create_application'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<EventTicketingArgs['obj']['create_application(string,uint64,uint64)void'] | EventTicketingArgs['tuple']['create_application(string,uint64,uint64)void']> & {method: 'create_application(string,uint64,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type EventTicketingDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: EventTicketingCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the EventTicketing smart contract
 */
export abstract class EventTicketingParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends EventTicketingCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create_application':
          case 'create_application(string,uint64,uint64)void':
            return EventTicketingParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the EventTicketing smart contract using the create_application(string,uint64,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<EventTicketingArgs['obj']['create_application(string,uint64,uint64)void'] | EventTicketingArgs['tuple']['create_application(string,uint64,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create_application(string,uint64,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.eventName, params.args.ticketPrice, params.args.totalTickets],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the mint_tickets()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static mintTickets(params: CallParams<EventTicketingArgs['obj']['mint_tickets()uint64'] | EventTicketingArgs['tuple']['mint_tickets()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'mint_tickets()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the buy_ticket(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static buyTicket(params: CallParams<EventTicketingArgs['obj']['buy_ticket(pay)void'] | EventTicketingArgs['tuple']['buy_ticket(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'buy_ticket(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payment],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the EventTicketing smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class EventTicketingFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `EventTicketingFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new EventTicketingClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new EventTicketingClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the EventTicketing smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: EventTicketingDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? EventTicketingParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (EventTicketingCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new EventTicketingClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the EventTicketing smart contract using the create_application(string,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<EventTicketingArgs['obj']['create_application(string,uint64,uint64)void'] | EventTicketingArgs['tuple']['create_application(string,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(EventTicketingParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the EventTicketing smart contract using the create_application(string,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<EventTicketingArgs['obj']['create_application(string,uint64,uint64)void'] | EventTicketingArgs['tuple']['create_application(string,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(EventTicketingParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the EventTicketing smart contract using an ABI method call using the create_application(string,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<EventTicketingArgs['obj']['create_application(string,uint64,uint64)void'] | EventTicketingArgs['tuple']['create_application(string,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(EventTicketingParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | EventTicketingReturns['create_application(string,uint64,uint64)void']) }, appClient: new EventTicketingClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the EventTicketing smart contract
 */
export class EventTicketingClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `EventTicketingClient`
   *
   * @param appClient An `AppClient` instance which has been created with the EventTicketing app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `EventTicketingClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends EventTicketingNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `EventTicketingClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<EventTicketingClient> {
    return new EventTicketingClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `EventTicketingClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<EventTicketingClient> {
    return new EventTicketingClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the EventTicketing smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the EventTicketing smart contract using the `mint_tickets()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    mintTickets: (params: CallParams<EventTicketingArgs['obj']['mint_tickets()uint64'] | EventTicketingArgs['tuple']['mint_tickets()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(EventTicketingParamsFactory.mintTickets(params))
    },

    /**
     * Makes a call to the EventTicketing smart contract using the `buy_ticket(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    buyTicket: (params: CallParams<EventTicketingArgs['obj']['buy_ticket(pay)void'] | EventTicketingArgs['tuple']['buy_ticket(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EventTicketingParamsFactory.buyTicket(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the EventTicketing smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the EventTicketing smart contract using the `mint_tickets()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    mintTickets: (params: CallParams<EventTicketingArgs['obj']['mint_tickets()uint64'] | EventTicketingArgs['tuple']['mint_tickets()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(EventTicketingParamsFactory.mintTickets(params))
    },

    /**
     * Makes a call to the EventTicketing smart contract using the `buy_ticket(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    buyTicket: (params: CallParams<EventTicketingArgs['obj']['buy_ticket(pay)void'] | EventTicketingArgs['tuple']['buy_ticket(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EventTicketingParamsFactory.buyTicket(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the EventTicketing smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the EventTicketing smart contract using the `mint_tickets()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    mintTickets: async (params: CallParams<EventTicketingArgs['obj']['mint_tickets()uint64'] | EventTicketingArgs['tuple']['mint_tickets()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(EventTicketingParamsFactory.mintTickets(params))
      return {...result, return: result.return as unknown as (undefined | EventTicketingReturns['mint_tickets()uint64'])}
    },

    /**
     * Makes a call to the EventTicketing smart contract using the `buy_ticket(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    buyTicket: async (params: CallParams<EventTicketingArgs['obj']['buy_ticket(pay)void'] | EventTicketingArgs['tuple']['buy_ticket(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EventTicketingParamsFactory.buyTicket(params))
      return {...result, return: result.return as unknown as (undefined | EventTicketingReturns['buy_ticket(pay)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new EventTicketingClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current EventTicketing app
   */
  state = {
    /**
     * Methods to access global state for the current EventTicketing app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          ticketAsaId: result.ticket_asa_id,
          ticketPrice: result.ticket_price,
          totalTickets: result.total_tickets,
          ticketsSold: result.tickets_sold,
          eventName: result.event_name,
        }
      },
      /**
       * Get the current value of the ticket_asa_id key in global state
       */
      ticketAsaId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("ticket_asa_id")) as bigint | undefined },
      /**
       * Get the current value of the ticket_price key in global state
       */
      ticketPrice: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("ticket_price")) as bigint | undefined },
      /**
       * Get the current value of the total_tickets key in global state
       */
      totalTickets: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_tickets")) as bigint | undefined },
      /**
       * Get the current value of the tickets_sold key in global state
       */
      ticketsSold: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("tickets_sold")) as bigint | undefined },
      /**
       * Get the current value of the event_name key in global state
       */
      eventName: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("event_name")) as string | undefined },
    },
  }

  public newGroup(): EventTicketingComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a mint_tickets()uint64 method call against the EventTicketing contract
       */
      mintTickets(params: CallParams<EventTicketingArgs['obj']['mint_tickets()uint64'] | EventTicketingArgs['tuple']['mint_tickets()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.mintTickets(params)))
        resultMappers.push((v) => client.decodeReturnValue('mint_tickets()uint64', v))
        return this
      },
      /**
       * Add a buy_ticket(pay)void method call against the EventTicketing contract
       */
      buyTicket(params: CallParams<EventTicketingArgs['obj']['buy_ticket(pay)void'] | EventTicketingArgs['tuple']['buy_ticket(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.buyTicket(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the EventTicketing contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as EventTicketingComposer
  }
}
export type EventTicketingComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the mint_tickets()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mintTickets(params?: CallParams<EventTicketingArgs['obj']['mint_tickets()uint64'] | EventTicketingArgs['tuple']['mint_tickets()uint64']>): EventTicketingComposer<[...TReturns, EventTicketingReturns['mint_tickets()uint64'] | undefined]>

  /**
   * Calls the buy_ticket(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buyTicket(params?: CallParams<EventTicketingArgs['obj']['buy_ticket(pay)void'] | EventTicketingArgs['tuple']['buy_ticket(pay)void']>): EventTicketingComposer<[...TReturns, EventTicketingReturns['buy_ticket(pay)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the EventTicketing smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): EventTicketingComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): EventTicketingComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<EventTicketingComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<EventTicketingComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<EventTicketingComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<EventTicketingComposerResults<TReturns>>
}
export type EventTicketingComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

