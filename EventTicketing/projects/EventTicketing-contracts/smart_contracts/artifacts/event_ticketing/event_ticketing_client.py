# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": []}, "methods": [{"actions": {"call": [], "create": ["NoOp"]}, "args": [{"type": "string", "name": "event_name"}, {"type": "uint64", "name": "ticket_price"}, {"type": "uint64", "name": "total_tickets"}], "name": "create_application", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "mint_tickets", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "payment"}], "name": "buy_ticket", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}], "name": "EventTicketing", "state": {"keys": {"box": {}, "global": {"ticket_asa_id": {"key": "YXNhX2lk", "keyType": "AVMBytes", "valueType": "AVMUint64", "desc": "Mint edilen bilet ASA ID"}, "ticket_price": {"key": "cHJpY2U=", "keyType": "AVMBytes", "valueType": "AVMUint64", "desc": "Bilet fiyat\u0131 (\u00b5Algo)"}, "total_tickets": {"key": "dG90YWw=", "keyType": "AVMBytes", "valueType": "AVMUint64", "desc": "Toplam bilet"}, "tickets_sold": {"key": "c29sZA==", "keyType": "AVMBytes", "valueType": "AVMUint64", "desc": "Sat\u0131lan bilet"}, "event_name": {"key": "bmFtZQ==", "keyType": "AVMBytes", "valueType": "AVMString", "desc": "Etkinlik ad\u0131"}}, "local": {}}, "maps": {"box": {}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 1, "ints": 4}, "local": {"bytes": 0, "ints": 0}}}, "structs": {}, "byteCode": {"approval": "CyADAAEIJgUGYXNhX2lkBXRvdGFsBHNvbGQEbmFtZQVwcmljZTEZFEQxGEEAFoICBICyAQAEZTaAuDYaAI4CAEYAlQCABArw0U82GgCOAQABADYaAUkiWYECCEsBFRJEVwIANhoCSRUkEkQXNhoDSRUkEkQXK08DZycETwJnKUxnKiJnKCJnI0MxADIJEkQiKGVEFESxIitlRCIpZUQyCkcDsiyyK7IqsikisiQisiOyIoAGVElDS0VUsiWyJoEDshAisgGztDwoSwFnFoAEFR98dUxQsCNDMRYjCUk4ECMSRCIqZUQiKWVESwENRCIoZURJREsCOAgiJwRlRBJETwI4BzIKEkSxMQAjshKyFLIRgQSyECKyAbMjCCpMZyND", "clear": "C4EBQw=="}, "desc": "\n    Event Ticketing Ak\u0131ll\u0131 Kontrat\u0131\n    Biletleri ASA/NFT olarak basar ve satar.\n    ", "events": [], "networks": {}, "source": {"approval": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuYXBwcm92YWxfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAwIDEgOAogICAgYnl0ZWNibG9jayAweDYxNzM2MTVmNjk2NCAweDc0NmY3NDYxNmMgMHg3MzZmNmM2NCAweDZlNjE2ZDY1IDB4NzA3MjY5NjM2NQogICAgLy8gc21hcnRfY29udHJhY3RzL2V2ZW50X3RpY2tldGluZy9jb250cmFjdC5weToxNgogICAgLy8gY2xhc3MgRXZlbnRUaWNrZXRpbmcoQVJDNENvbnRyYWN0KToKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gbXVzdCBiZSBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYnogbWFpbl9jcmVhdGVfTm9PcEA4CiAgICBwdXNoYnl0ZXNzIDB4ODBiMjAxMDAgMHg2NTM2ODBiOCAvLyBtZXRob2QgIm1pbnRfdGlja2V0cygpdWludDY0IiwgbWV0aG9kICJidXlfdGlja2V0KHBheSl2b2lkIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWludF90aWNrZXRzIGJ1eV90aWNrZXQKICAgIGVycgoKbWFpbl9jcmVhdGVfTm9PcEA4OgogICAgLy8gc21hcnRfY29udHJhY3RzL2V2ZW50X3RpY2tldGluZy9jb250cmFjdC5weToxNgogICAgLy8gY2xhc3MgRXZlbnRUaWNrZXRpbmcoQVJDNENvbnRyYWN0KToKICAgIHB1c2hieXRlcyAweDBhZjBkMTRmIC8vIG1ldGhvZCAiY3JlYXRlX2FwcGxpY2F0aW9uKHN0cmluZyx1aW50NjQsdWludDY0KXZvaWQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBjcmVhdGVfYXBwbGljYXRpb24KICAgIGVycgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5ldmVudF90aWNrZXRpbmcuY29udHJhY3QuRXZlbnRUaWNrZXRpbmcuY3JlYXRlX2FwcGxpY2F0aW9uW3JvdXRpbmddKCkgLT4gdm9pZDoKY3JlYXRlX2FwcGxpY2F0aW9uOgogICAgLy8gc21hcnRfY29udHJhY3RzL2V2ZW50X3RpY2tldGluZy9jb250cmFjdC5weTozNi0zNwogICAgLy8gIyAtLS0gMSkgQ3JlYXRlIC8gSW5pdCAtLS0KICAgIC8vIEBhcmM0LmFiaW1ldGhvZChjcmVhdGU9InJlcXVpcmUiKQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgZHVwCiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50MTYgLy8gb24gZXJyb3I6IGludmFsaWQgYXJyYXkgbGVuZ3RoIGhlYWRlcgogICAgcHVzaGludCAyIC8vIDIKICAgICsKICAgIGRpZyAxCiAgICBsZW4KICAgID09CiAgICBhc3NlcnQgLy8gaW52YWxpZCBudW1iZXIgb2YgYnl0ZXMgZm9yIGFyYzQuZHluYW1pY19hcnJheTxhcmM0LnVpbnQ4PgogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzIgLy8gOAogICAgPT0KICAgIGFzc2VydCAvLyBpbnZhbGlkIG51bWJlciBvZiBieXRlcyBmb3IgYXJjNC51aW50NjQKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzIgLy8gOAogICAgPT0KICAgIGFzc2VydCAvLyBpbnZhbGlkIG51bWJlciBvZiBieXRlcyBmb3IgYXJjNC51aW50NjQKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9ldmVudF90aWNrZXRpbmcvY29udHJhY3QucHk6NDQKICAgIC8vIHNlbGYuZXZlbnRfbmFtZS52YWx1ZSA9IGV2ZW50X25hbWUKICAgIGJ5dGVjXzMgLy8gMHg2ZTYxNmQ2NQogICAgdW5jb3ZlciAzCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2V2ZW50X3RpY2tldGluZy9jb250cmFjdC5weTo0NQogICAgLy8gc2VsZi50aWNrZXRfcHJpY2UudmFsdWUgPSB0aWNrZXRfcHJpY2UKICAgIGJ5dGVjIDQgLy8gMHg3MDcyNjk2MzY1CiAgICB1bmNvdmVyIDIKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXZlbnRfdGlja2V0aW5nL2NvbnRyYWN0LnB5OjQ2CiAgICAvLyBzZWxmLnRvdGFsX3RpY2tldHMudmFsdWUgPSB0b3RhbF90aWNrZXRzCiAgICBieXRlY18xIC8vIDB4NzQ2Zjc0NjE2YwogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9ldmVudF90aWNrZXRpbmcvY29udHJhY3QucHk6NDcKICAgIC8vIHNlbGYudGlja2V0c19zb2xkLnZhbHVlID0gVUludDY0KDApCiAgICBieXRlY18yIC8vIDB4NzM2ZjZjNjQKICAgIGludGNfMCAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2V2ZW50X3RpY2tldGluZy9jb250cmFjdC5weTo0OAogICAgLy8gc2VsZi50aWNrZXRfYXNhX2lkLnZhbHVlID0gVUludDY0KDApCiAgICBieXRlY18wIC8vIDB4NjE3MzYxNWY2OTY0CiAgICBpbnRjXzAgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9ldmVudF90aWNrZXRpbmcvY29udHJhY3QucHk6MzYtMzcKICAgIC8vICMgLS0tIDEpIENyZWF0ZSAvIEluaXQgLS0tCiAgICAvLyBAYXJjNC5hYmltZXRob2QoY3JlYXRlPSJyZXF1aXJlIikKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMuZXZlbnRfdGlja2V0aW5nLmNvbnRyYWN0LkV2ZW50VGlja2V0aW5nLm1pbnRfdGlja2V0c1tyb3V0aW5nXSgpIC0+IHZvaWQ6Cm1pbnRfdGlja2V0czoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9ldmVudF90aWNrZXRpbmcvY29udHJhY3QucHk6NTMtNTQKICAgIC8vICMgU2FkZWNlIGt1cnVjdQogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcywgIlNhZGVjZSBrb250cmF0IGt1cnVjdXN1IGJpbGV0IGJhc2FiaWxpciIKICAgIHR4biBTZW5kZXIKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgPT0KICAgIGFzc2VydCAvLyBTYWRlY2Uga29udHJhdCBrdXJ1Y3VzdSBiaWxldCBiYXNhYmlsaXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9ldmVudF90aWNrZXRpbmcvY29udHJhY3QucHk6NTUtNTYKICAgIC8vICMgRGFoYSDDtm5jZSBiYXPEsWxtYWTEsSBtxLE/CiAgICAvLyBhc3NlcnQgc2VsZi50aWNrZXRfYXNhX2lkLnZhbHVlID09IFVJbnQ2NCgwKSwgIkJpbGV0bGVyIHphdGVuIGJhc8SxbG3EscWfIgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gMHg2MTczNjE1ZjY5NjQKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi50aWNrZXRfYXNhX2lkIGV4aXN0cwogICAgIQogICAgYXNzZXJ0IC8vIEJpbGV0bGVyIHphdGVuIGJhc8SxbG3EscWfCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXZlbnRfdGlja2V0aW5nL2NvbnRyYWN0LnB5OjU4LTY4CiAgICAvLyBjcmVhdGVkX2Fzc2V0X2lkID0gYWxnb3B5Lml0eG4uQXNzZXRDb25maWcoCiAgICAvLyAgICAgYXNzZXRfbmFtZT1zZWxmLmV2ZW50X25hbWUudmFsdWUsCiAgICAvLyAgICAgdW5pdF9uYW1lPSJUSUNLRVQiLAogICAgLy8gICAgIHRvdGFsPXNlbGYudG90YWxfdGlja2V0cy52YWx1ZSwKICAgIC8vICAgICBkZWNpbWFscz0wLAogICAgLy8gICAgIGRlZmF1bHRfZnJvemVuPUZhbHNlLAogICAgLy8gICAgIG1hbmFnZXI9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIC8vICAgICByZXNlcnZlPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICAvLyAgICAgZnJlZXplPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICAvLyAgICAgY2xhd2JhY2s9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIC8vICkuc3VibWl0KCkuY3JlYXRlZF9hc3NldC5pZAogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL2V2ZW50X3RpY2tldGluZy9jb250cmFjdC5weTo1OQogICAgLy8gYXNzZXRfbmFtZT1zZWxmLmV2ZW50X25hbWUudmFsdWUsCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMyAvLyAweDZlNjE2ZDY1CiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZXZlbnRfbmFtZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9ldmVudF90aWNrZXRpbmcvY29udHJhY3QucHk6NjEKICAgIC8vIHRvdGFsPXNlbGYudG90YWxfdGlja2V0cy52YWx1ZSwKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18xIC8vIDB4NzQ2Zjc0NjE2YwogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnRvdGFsX3RpY2tldHMgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXZlbnRfdGlja2V0aW5nL2NvbnRyYWN0LnB5OjY0CiAgICAvLyBtYW5hZ2VyPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgLy8gc21hcnRfY29udHJhY3RzL2V2ZW50X3RpY2tldGluZy9jb250cmFjdC5weTo2NS02NwogICAgLy8gcmVzZXJ2ZT1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgLy8gZnJlZXplPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICAvLyBjbGF3YmFjaz1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgZHVwbiAzCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0Q2xhd2JhY2sKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXRGcmVlemUKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXRSZXNlcnZlCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0TWFuYWdlcgogICAgLy8gc21hcnRfY29udHJhY3RzL2V2ZW50X3RpY2tldGluZy9jb250cmFjdC5weTo2MwogICAgLy8gZGVmYXVsdF9mcm96ZW49RmFsc2UsCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBDb25maWdBc3NldERlZmF1bHRGcm96ZW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9ldmVudF90aWNrZXRpbmcvY29udHJhY3QucHk6NjIKICAgIC8vIGRlY2ltYWxzPTAsCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBDb25maWdBc3NldERlY2ltYWxzCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VG90YWwKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9ldmVudF90aWNrZXRpbmcvY29udHJhY3QucHk6NjAKICAgIC8vIHVuaXRfbmFtZT0iVElDS0VUIiwKICAgIHB1c2hieXRlcyAiVElDS0VUIgogICAgaXR4bl9maWVsZCBDb25maWdBc3NldFVuaXROYW1lCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0TmFtZQogICAgLy8gc21hcnRfY29udHJhY3RzL2V2ZW50X3RpY2tldGluZy9jb250cmFjdC5weTo1OAogICAgLy8gY3JlYXRlZF9hc3NldF9pZCA9IGFsZ29weS5pdHhuLkFzc2V0Q29uZmlnKAogICAgcHVzaGludCAzIC8vIGFjZmcKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL2V2ZW50X3RpY2tldGluZy9jb250cmFjdC5weTo1OC02OAogICAgLy8gY3JlYXRlZF9hc3NldF9pZCA9IGFsZ29weS5pdHhuLkFzc2V0Q29uZmlnKAogICAgLy8gICAgIGFzc2V0X25hbWU9c2VsZi5ldmVudF9uYW1lLnZhbHVlLAogICAgLy8gICAgIHVuaXRfbmFtZT0iVElDS0VUIiwKICAgIC8vICAgICB0b3RhbD1zZWxmLnRvdGFsX3RpY2tldHMudmFsdWUsCiAgICAvLyAgICAgZGVjaW1hbHM9MCwKICAgIC8vICAgICBkZWZhdWx0X2Zyb3plbj1GYWxzZSwKICAgIC8vICAgICBtYW5hZ2VyPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICAvLyAgICAgcmVzZXJ2ZT1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgLy8gICAgIGZyZWV6ZT1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgLy8gICAgIGNsYXdiYWNrPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICAvLyApLnN1Ym1pdCgpLmNyZWF0ZWRfYXNzZXQuaWQKICAgIGl0eG5fc3VibWl0CiAgICBpdHhuIENyZWF0ZWRBc3NldElECiAgICAvLyBzbWFydF9jb250cmFjdHMvZXZlbnRfdGlja2V0aW5nL2NvbnRyYWN0LnB5OjcwCiAgICAvLyBzZWxmLnRpY2tldF9hc2FfaWQudmFsdWUgPSBjcmVhdGVkX2Fzc2V0X2lkCiAgICBieXRlY18wIC8vIDB4NjE3MzYxNWY2OTY0CiAgICBkaWcgMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9ldmVudF90aWNrZXRpbmcvY29udHJhY3QucHk6NTAtNTEKICAgIC8vICMgLS0tIDIpIE1pbnQgdGlja2V0cyAoQVNBKSAtLS0KICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgaXRvYgogICAgcHVzaGJ5dGVzIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgoKLy8gc21hcnRfY29udHJhY3RzLmV2ZW50X3RpY2tldGluZy5jb250cmFjdC5FdmVudFRpY2tldGluZy5idXlfdGlja2V0W3JvdXRpbmddKCkgLT4gdm9pZDoKYnV5X3RpY2tldDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9ldmVudF90aWNrZXRpbmcvY29udHJhY3QucHk6NzMtNzQKICAgIC8vICMgLS0tIDMpIEJ1eSB0aWNrZXQgKGF0b21pYyB3aXRoIHBheW1lbnQpIC0tLQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50Y18xIC8vIDEKICAgIC0KICAgIGR1cAogICAgZ3R4bnMgVHlwZUVudW0KICAgIGludGNfMSAvLyBwYXkKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBwYXkKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9ldmVudF90aWNrZXRpbmcvY29udHJhY3QucHk6NzYKICAgIC8vIGFzc2VydCBzZWxmLnRpY2tldHNfc29sZC52YWx1ZSA8IHNlbGYudG90YWxfdGlja2V0cy52YWx1ZSwgIkJpbGV0bGVyIHTDvGtlbmRpIgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzIgLy8gMHg3MzZmNmM2NAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnRpY2tldHNfc29sZCBleGlzdHMKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18xIC8vIDB4NzQ2Zjc0NjE2YwogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnRvdGFsX3RpY2tldHMgZXhpc3RzCiAgICBkaWcgMQogICAgPgogICAgYXNzZXJ0IC8vIEJpbGV0bGVyIHTDvGtlbmRpCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXZlbnRfdGlja2V0aW5nL2NvbnRyYWN0LnB5Ojc3CiAgICAvLyBhc3NlcnQgc2VsZi50aWNrZXRfYXNhX2lkLnZhbHVlICE9IFVJbnQ2NCgwKSwgIkJpbGV0IHNhdMSxxZ/EsSBoZW7DvHogYmHFn2xhbWFkxLEiCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAweDYxNzM2MTVmNjk2NAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnRpY2tldF9hc2FfaWQgZXhpc3RzCiAgICBkdXAKICAgIGFzc2VydCAvLyBCaWxldCBzYXTEscWfxLEgaGVuw7x6IGJhxZ9sYW1hZMSxCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXZlbnRfdGlja2V0aW5nL2NvbnRyYWN0LnB5Ojc5CiAgICAvLyBhc3NlcnQgcGF5bWVudC5hbW91bnQgPT0gc2VsZi50aWNrZXRfcHJpY2UudmFsdWUsICLDlmRlbWUgbWlrdGFyxLEgYmlsZXQgZml5YXTEsXlsYSBlxZ9sZcWfbWl5b3IiCiAgICBkaWcgMgogICAgZ3R4bnMgQW1vdW50CiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNCAvLyAweDcwNzI2OTYzNjUKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi50aWNrZXRfcHJpY2UgZXhpc3RzCiAgICA9PQogICAgYXNzZXJ0IC8vIMOWZGVtZSBtaWt0YXLEsSBiaWxldCBmaXlhdMSxeWxhIGXFn2xlxZ9taXlvcgogICAgLy8gc21hcnRfY29udHJhY3RzL2V2ZW50X3RpY2tldGluZy9jb250cmFjdC5weTo4MAogICAgLy8gYXNzZXJ0IHBheW1lbnQucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywgIsOWZGVtZSBidSBrb250cmF0YSB5YXDEsWxtYWzEsSIKICAgIHVuY292ZXIgMgogICAgZ3R4bnMgUmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIMOWZGVtZSBidSBrb250cmF0YSB5YXDEsWxtYWzEsQogICAgLy8gc21hcnRfY29udHJhY3RzL2V2ZW50X3RpY2tldGluZy9jb250cmFjdC5weTo4Mi04NwogICAgLy8gIyBORlQgdHJhbnNmZXJpIChpbm5lciB0eCkKICAgIC8vIGFsZ29weS5pdHhuLkFzc2V0VHJhbnNmZXIoCiAgICAvLyAgICAgeGZlcl9hc3NldD1zZWxmLnRpY2tldF9hc2FfaWQudmFsdWUsCiAgICAvLyAgICAgYXNzZXRfcmVjZWl2ZXI9VHhuLnNlbmRlciwKICAgIC8vICAgICBhc3NldF9hbW91bnQ9MSwKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9ldmVudF90aWNrZXRpbmcvY29udHJhY3QucHk6ODUKICAgIC8vIGFzc2V0X3JlY2VpdmVyPVR4bi5zZW5kZXIsCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXZlbnRfdGlja2V0aW5nL2NvbnRyYWN0LnB5Ojg2CiAgICAvLyBhc3NldF9hbW91bnQ9MSwKICAgIGludGNfMSAvLyAxCiAgICBpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CiAgICBpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKICAgIGl0eG5fZmllbGQgWGZlckFzc2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXZlbnRfdGlja2V0aW5nL2NvbnRyYWN0LnB5OjgyLTgzCiAgICAvLyAjIE5GVCB0cmFuc2ZlcmkgKGlubmVyIHR4KQogICAgLy8gYWxnb3B5Lml0eG4uQXNzZXRUcmFuc2ZlcigKICAgIHB1c2hpbnQgNCAvLyBheGZlcgogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXZlbnRfdGlja2V0aW5nL2NvbnRyYWN0LnB5OjgyLTg3CiAgICAvLyAjIE5GVCB0cmFuc2ZlcmkgKGlubmVyIHR4KQogICAgLy8gYWxnb3B5Lml0eG4uQXNzZXRUcmFuc2ZlcigKICAgIC8vICAgICB4ZmVyX2Fzc2V0PXNlbGYudGlja2V0X2FzYV9pZC52YWx1ZSwKICAgIC8vICAgICBhc3NldF9yZWNlaXZlcj1UeG4uc2VuZGVyLAogICAgLy8gICAgIGFzc2V0X2Ftb3VudD0xLAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9ldmVudF90aWNrZXRpbmcvY29udHJhY3QucHk6ODkKICAgIC8vIHNlbGYudGlja2V0c19zb2xkLnZhbHVlID0gc2VsZi50aWNrZXRzX3NvbGQudmFsdWUgKyBVSW50NjQoMSkKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBieXRlY18yIC8vIDB4NzM2ZjZjNjQKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXZlbnRfdGlja2V0aW5nL2NvbnRyYWN0LnB5OjczLTc0CiAgICAvLyAjIC0tLSAzKSBCdXkgdGlja2V0IChhdG9taWMgd2l0aCBwYXltZW50KSAtLS0KICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgo=", "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [243], "errorMessage": "Bilet sat\u0131\u015f\u0131 hen\u00fcz ba\u015flamad\u0131"}, {"pc": [237], "errorMessage": "Biletler t\u00fckendi"}, {"pc": [148], "errorMessage": "Biletler zaten bas\u0131lm\u0131\u015f"}, {"pc": [40], "errorMessage": "OnCompletion must be NoOp"}, {"pc": [142], "errorMessage": "Sadece kontrat kurucusu bilet basabilir"}, {"pc": [153], "errorMessage": "check self.event_name exists"}, {"pc": [146, 241], "errorMessage": "check self.ticket_asa_id exists"}, {"pc": [252], "errorMessage": "check self.ticket_price exists"}, {"pc": [229], "errorMessage": "check self.tickets_sold exists"}, {"pc": [157, 233], "errorMessage": "check self.total_tickets exists"}, {"pc": [87], "errorMessage": "invalid array length header"}, {"pc": [95], "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>"}, {"pc": [106, 115], "errorMessage": "invalid number of bytes for arc4.uint64"}, {"pc": [225], "errorMessage": "transaction type is pay"}, {"pc": [262], "errorMessage": "\u00d6deme bu kontrata yap\u0131lmal\u0131"}, {"pc": [254], "errorMessage": "\u00d6deme miktar\u0131 bilet fiyat\u0131yla e\u015fle\u015fmiyor"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True, kw_only=True)
class BuyTicketArgs:
    """Dataclass for buy_ticket arguments"""
    payment: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "buy_ticket(pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CreateApplicationArgs:
    """Dataclass for create_application arguments"""
    event_name: str
    ticket_price: int
    total_tickets: int

    @property
    def abi_method_signature(self) -> str:
        return "create_application(string,uint64,uint64)void"


class EventTicketingParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def mint_tickets(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint_tickets()uint64",
        }))

    def buy_ticket(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | BuyTicketArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "buy_ticket(pay)void",
            "args": method_args,
        }))

    def create_application(
        self,
        args: tuple[str, int, int] | CreateApplicationArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_application(string,uint64,uint64)void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class EventTicketingCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def mint_tickets(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint_tickets()uint64",
        }))

    def buy_ticket(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | BuyTicketArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "buy_ticket(pay)void",
            "args": method_args,
        }))

    def create_application(
        self,
        args: tuple[str, int, int] | CreateApplicationArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_application(string,uint64,uint64)void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class EventTicketingSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def mint_tickets(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint_tickets()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def buy_ticket(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | BuyTicketArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "buy_ticket(pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def create_application(
        self,
        args: tuple[str, int, int] | CreateApplicationArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_application(string,uint64,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    ticket_asa_id: int
    ticket_price: int
    total_tickets: int
    tickets_sold: int
    event_name: str

class EventTicketingState:
    """Methods to access state for the current EventTicketing app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def ticket_asa_id(self) -> int:
        """Get the current value of the ticket_asa_id key in global_state state"""
        value = self.app_client.state.global_state.get_value("ticket_asa_id")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def ticket_price(self) -> int:
        """Get the current value of the ticket_price key in global_state state"""
        value = self.app_client.state.global_state.get_value("ticket_price")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def total_tickets(self) -> int:
        """Get the current value of the total_tickets key in global_state state"""
        value = self.app_client.state.global_state.get_value("total_tickets")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def tickets_sold(self) -> int:
        """Get the current value of the tickets_sold key in global_state state"""
        value = self.app_client.state.global_state.get_value("tickets_sold")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def event_name(self) -> str:
        """Get the current value of the event_name key in global_state state"""
        value = self.app_client.state.global_state.get_value("event_name")
        if isinstance(value, dict) and "AVMString" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMString"], value)  # type: ignore
        return typing.cast(str, value)

class EventTicketingClient:
    """Client for interacting with EventTicketing smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = EventTicketingParams(self.app_client)
        self.create_transaction = EventTicketingCreateTransactionParams(self.app_client)
        self.send = EventTicketingSend(self.app_client)
        self.state = EventTicketingState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "EventTicketingClient":
        return EventTicketingClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "EventTicketingClient":
        return EventTicketingClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "EventTicketingClient":
        return EventTicketingClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "EventTicketingComposer":
        return EventTicketingComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["mint_tickets()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["buy_ticket(pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["create_application(string,uint64,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | int:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class EventTicketingMethodCallCreateParams(
    algokit_utils.AppClientCreateSchema, algokit_utils.BaseAppClientMethodCallParams[
        CreateApplicationArgs,
        str | None,
    ]
):
    """Parameters for creating EventTicketing contract using ABI"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallCreateParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallCreateParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

class EventTicketingFactory(algokit_utils.TypedAppFactoryProtocol[EventTicketingMethodCallCreateParams, None, None]):
    """Factory for deploying and managing EventTicketingClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = EventTicketingFactoryParams(self.app_factory)
        self.create_transaction = EventTicketingFactoryCreateTransaction(self.app_factory)
        self.send = EventTicketingFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: EventTicketingMethodCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[EventTicketingClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return EventTicketingClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> EventTicketingClient:
        """Get an app client by creator address and name"""
        return EventTicketingClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> EventTicketingClient:
        """Get an app client by app ID"""
        return EventTicketingClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class EventTicketingFactoryParams:
    """Parameters for creating transactions for EventTicketing contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = EventTicketingFactoryCreateParams(app_factory)
        self.update = EventTicketingFactoryUpdateParams(app_factory)
        self.delete = EventTicketingFactoryDeleteParams(app_factory)

class EventTicketingFactoryCreateParams:
    """Parameters for 'create' operations of EventTicketing contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def mint_tickets(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the mint_tickets()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "mint_tickets()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def buy_ticket(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | BuyTicketArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the buy_ticket(pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "buy_ticket(pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def create_application(
        self,
        args: tuple[str, int, int] | CreateApplicationArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the create_application(string,uint64,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "create_application(string,uint64,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class EventTicketingFactoryUpdateParams:
    """Parameters for 'update' operations of EventTicketing contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class EventTicketingFactoryDeleteParams:
    """Parameters for 'delete' operations of EventTicketing contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class EventTicketingFactoryCreateTransaction:
    """Create transactions for EventTicketing contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = EventTicketingFactoryCreateTransactionCreate(app_factory)


class EventTicketingFactoryCreateTransactionCreate:
    """Create new instances of EventTicketing contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class EventTicketingFactorySend:
    """Send calls to EventTicketing contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = EventTicketingFactorySendCreate(app_factory)


class EventTicketingFactorySendCreate:
    """Send create calls to EventTicketing contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[EventTicketingClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return EventTicketingClient(result[0]), result[1]

    def create_application(
        self,
        args: tuple[str, int, int] | CreateApplicationArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> tuple[EventTicketingClient, algokit_utils.AppFactoryCreateMethodCallResult[None]]:
            """Creates and sends a transaction using the create_application(string,uint64,uint64)void ABI method"""
            params = params or algokit_utils.CommonAppCallCreateParams()
            client, result = self.app_factory.send.create(
                algokit_utils.AppFactoryCreateMethodCallParams(
                    **{
                    **dataclasses.asdict(params),
                    "method": "create_application(string,uint64,uint64)void",
                    "args": _parse_abi_args(args),
                    }
                ),
                send_params=send_params,
                compilation_params=compilation_params
            )
            return_value = None if result.abi_return is None else typing.cast(None, result.abi_return)
    
            return EventTicketingClient(client), algokit_utils.AppFactoryCreateMethodCallResult[None](
                **{
                    **result.__dict__,
                    "app_id": result.app_id,
                    "abi_return": return_value,
                    "transaction": result.transaction,
                    "confirmation": result.confirmation,
                    "group_id": result.group_id,
                    "tx_ids": result.tx_ids,
                    "transactions": result.transactions,
                    "confirmations": result.confirmations,
                    "app_address": result.app_address,
                }
            )


class EventTicketingComposer:
    """Composer for creating transaction groups for EventTicketing contract calls"""

    def __init__(self, client: "EventTicketingClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def mint_tickets(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "EventTicketingComposer":
        self._composer.add_app_call_method_call(
            self.client.params.mint_tickets(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "mint_tickets()uint64", v
            )
        )
        return self

    def buy_ticket(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | BuyTicketArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "EventTicketingComposer":
        self._composer.add_app_call_method_call(
            self.client.params.buy_ticket(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "buy_ticket(pay)void", v
            )
        )
        return self

    def create_application(
        self,
        args: tuple[str, int, int] | CreateApplicationArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "EventTicketingComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create_application(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "create_application(string,uint64,uint64)void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "EventTicketingComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "EventTicketingComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
